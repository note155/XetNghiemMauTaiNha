@page "/BSedit/{id:int}"
@inject HttpClient client
@rendermode InteractiveAuto

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <img src=@Input.Anh class="profile-image" alt="Avatar">
            <EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
                <DataAnnotationsValidator />
                <ValidationSummary />            
                <InputFile class="form-control mt-2" OnChange="@setfile" multiple />
                <button class="btn btn-primary mt-2" type="submit">Xác Nhận Đổi Ảnh</button>
            </EditForm>
        </div>
        <div class="col-md-8">
            <h2 class="mb-4">Thông tin bác sĩ</h2>
            <EditForm Model="Input" method="post" onchange="edit" FormName="register" class="profile-form">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="mb-3">
                    <label for="Hoten" class="form-label">Họ Tên</label>
                    <InputText @bind-Value="Input.Hoten" class="form-control" id="Hoten" />
                    <ValidationMessage For="() => Input.Hoten" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Chucvu" class="form-label">Chức Vụ</label>
                    <InputText @bind-Value="Input.Chucvu" class="form-control" id="Chucvu" />
                    <ValidationMessage For="() => Input.Chucvu" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="SDT" class="form-label">Số Điện Thoại</label>
                    <InputText @bind-Value="Input.SDT" class="form-control" id="SDT" />
                    <ValidationMessage For="() => Input.SDT" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Email" class="form-label">Email</label>
                    <InputText @bind-Value="Input.Email" class="form-control" id="Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Lưu</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public BacSi Input { get; set; } = new();

    [Parameter]
    public int id { get; set; }

    public string img="img/Bacsi/";
    private WebAssemblyTicket Ticket { get; set; } = new();
    private WebAssemblyTicket load { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;
    string safeFileName = "";
    protected override async Task OnInitializedAsync()
    {
        await LoadBS();
    }
    private async Task edit()
    {
        await bacsiservice.updateAsync(Input);
    }
    public async Task LoadBS()
    {
        Input = await bacsiservice.getbyid(id);
    }
 
    private void setfile(InputFileChangeEventArgs e)
    {
        Ticket.Attachments = e.GetMultipleFiles();
    }
    private async Task OnSubmit()
    {
        try
        {
            using MultipartFormDataContent content = new();

          
            foreach (var file in Ticket.Attachments)
            {
                // Add file attachment
                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                 safeFileName = $"{timestamp}{Path.GetExtension(file.Name)}";
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse(file.ContentType);
                content.Add(fileContent, "Attachments", safeFileName);
            }

            // Send to API endpoint
            var response = await client.PostAsync("/upload", content);

            Message = response.IsSuccessStatusCode ? "Upload successful!" : response.ReasonPhrase;
            Ticket = new();
            Input.Anh = img + safeFileName;
            await bacsiservice.updateAsync(Input);
        }
        catch (Exception e)
        {
            Message = "Upload failed. Error: " + e.Message;
        }
    }

    private class WebAssemblyTicket
    {
        public IReadOnlyList<IBrowserFile> Attachments { get; set; }
    }
}