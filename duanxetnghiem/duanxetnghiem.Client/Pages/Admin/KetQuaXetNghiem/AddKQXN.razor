@page "/addKQXN/{id:int}"
@using Shared.form
@rendermode InteractiveAuto
@inject NavigationManager navigation;
@attribute [Authorize]

<div class="patient-registration-container">
    <div class="patient-info">
        <h2>Thông tin bệnh nhân</h2>
        <div class="info">
            <p><strong>Họ tên:</strong> @user.Hoten</p>
            <p><strong>Tuổi:</strong> @user.Tuoi</p>
            <p><strong>Số điện thoại:</strong> @user.SDT</p>
            <p><strong>Địa chỉ:</strong> @user.Diachi</p>
            <p><strong>Email:</strong> @user.Email</p>
            <p><strong>Giới tính:</strong> @gioitinh(@user.Gioitinh)</p>
        </div>
    </div>

    <div class="test-registration-form">
        <h2>Thông tin đơn đăng ký xét nghiệm</h2>
        <div style="background-color:greenyellow;color:black" class="btn btn-primary btn-lg disabled">  <strong>Trạng Thái: </strong>@Input.Trangthai</div>
        <EditForm Model="Input" method="post" OnValidSubmit="add" FormName="register" class="profile-form">
            <DataAnnotationsValidator />
            <hr />


            <div class="form-group">
                <label for="ngaytaodon">Ngày tạo đơn</label>
                <InputDate @bind-Value="Input.ngaytaodon" class="form-control" id="Ngaytaodon" readonly />
                <ValidationMessage For="() => Input.ngaytaodon" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="Ngaydat">Ngày Lấy Máu</label>
                <InputDate @bind-Value="Input.Ngaydat" class="form-control" id="Ngaydat" min="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
                <ValidationMessage For="() => Input.Ngaydat" class="text-danger" />
            </div>
            <div class="form-group">
                <label for="giolaymau">Giờ lấy máu</label>
                <InputText @bind-Value="Input.giolaymau" class="form-control" id="giolaymau" readonly />
                <ValidationMessage For="() => Input.giolaymau" class="text-danger" />
            </div>
        </EditForm>
        <div >
            <h2>Kết Quả</h2>
            <EditForm Model="Inputkq" method="post" OnValidSubmit="addkq" FormName="addkq" class="profile-form">
                <DataAnnotationsValidator />
                <hr />
                <div class="form-group">
                    <label for="ngaycoKQ">Ngày Có Kết Quả</label>
                    <InputDate @bind-Value="Inputkq.ngaycoKQ" class="form-control" id="ngaycoKQ" />
                    <ValidationMessage For="() => Inputkq.ngaycoKQ" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="khoa">Khoa</label>
                    <InputText @bind-Value="Inputkq.khoa" class="form-control" id="khoa" />
                    <ValidationMessage For="() => Inputkq.khoa" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="nhommau">Nhóm Máu</label>
                    <InputText @bind-Value="Inputkq.nhommau" class="form-control" id="nhommau" />
                    <ValidationMessage For="() => Inputkq.nhommau" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="ghiChu">Ghi chú</label>
                    <InputTextArea @bind-Value="Inputkq.ghiChu" class="form-control" id="ghiChu" />
                    <ValidationMessage For="() => Inputkq.ghiChu" class="text-danger" />
                </div>

                <!-- Input for list of KQandCS -->
                <h3>Danh sách Kết Quả và Chỉ Số</h3>
                @if (Inputkq.kQandCs != null)
                {
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Chỉ Số</th>
                                <th>Kết Quả</th>
                                <th>CSBT</th>
                                <th>Đơn Vị</th>
                            </tr>
                        </thead>
                        @foreach (var kqandcs in Inputkq.kQandCs)
                        {
                            if (kqandcs.goi != goi)
                            {
                                goi = kqandcs.goi;
                                <tr><td colspan="4"><strong>Gói Xét Nghiệm:</strong>@loadtengoi(goi)</td></tr>
                            }
                            <tr>
                                <td>@loadtenchiso(kqandcs.id)</td>
                                <td>
                                    <InputText @bind-Value="kqandcs.kq" class="form-control" />
                                    <ValidationMessage For="() => kqandcs.kq" class="text-danger" />
                                </td>
                                <td>
                                    @loadcsbt(kqandcs.id)
                                </td>
                                <td>
                                    @loaddonvi(kqandcs.id)
                                </td>
                            </tr>
                        }
                    </table>
                    <a href="/ListDXN"><button style="background-color:red" class="btn btn-primary"> Hủy </button></a>
                    <button type="submit" class="btn btn-primary">Trả kết quả</button>
                }
            </EditForm>

        </div>
    </div>
</div>
@code {
    [Parameter]
    public int id { get; set; }

    int goi=-1;
    public List<GoiXetNghiem> allGXN { get; set; } = new();
    public List<GoiXetNghiem> gxndachon { get; set; } = new();
    public List<DXNandGXN> dxn { get; set; } = new();
    public List<Chiso> allchiso { get; set; } = new();
    public DonXetNghiem Input { get; set; } = new();
    private User user { get; set; } = new();
    public Chiso cs { get; set; } = new();

    [SupplyParameterFromForm]
    public KQXN Inputkq { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input = await DXNservice.getbyid(id);
        user = await Usertservice.getuserbyid(Input.UserId);
        allGXN = await GXNservice.getallAsync();
        dxn = await DXNservice.getallGXNAsync(id);
        loadgxndachon();
        allchiso = await CSservice.getallAsync();
        Inputkq.ngaycoKQ = DateTime.Now;
        Inputkq.kQandCs = new List<ChisoKq>();
        foreach (var a in gxndachon)
        {
            var listcs = await GXNservice.getallCSbyidAsync(a.Id);
            foreach(var b in listcs)
            {       
                ChisoKq kq = new ChisoKq
                    {
                        id = b.ChisoId,
                        goi = a.Id
            };
                Inputkq.kQandCs.Add(kq);
            }
        }
    }
    private async Task add()
    {

    }
    private async Task addkq()
    {
        KetQuaXetNghiem kqq = new KetQuaXetNghiem
        {
            DonXetNghiemId=id,
            ngaycoKQ=Inputkq.ngaycoKQ,
            ghiChu=Inputkq.ghiChu,
            khoa=Inputkq.khoa,
            nhommau=Inputkq.nhommau
        };
        var kq1 = await KQXNservice.addAsync(kqq);
        foreach(var ab in Inputkq.kQandCs)
        {
            KQandCS cs1 = new KQandCS
            {
                KetQuaXetNghiemId=kq1.Id,
                ChisoId=ab.id,
                KetQua=ab.kq
            };
            await KQXNservice.addKQandCS(cs1);
        }
    }
    private void loadgxndachon()
    {
        foreach (var a in dxn)
        {

            foreach (var b in allGXN)
            {
                if (b.Id == a.GoiXetNghiemId)
                {
                    gxndachon.Add(b);
                }
            }
            allGXN.RemoveAll(item => item.Id == a.GoiXetNghiemId);
        }
    }
    private string loadtengoi(int id)
    {
        foreach(var i in gxndachon)
        {
            if (i.Id == id)
            {
                return i.TenGoi;
            }
        }
        return null;
    }
    private string loadcsbt(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.CSBT;
            }
        }
        return null;
    }
    private string loaddonvi(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.DonVi;
            }
        }
        return null;
    }
    private string loadtenchiso(int id)
    {
        foreach (var i in allchiso)
        {
            if (i.Id == id)
            {
                return i.ten;
            }
        }
        return null;
    }
    private String gioitinh(bool a)
    {
        if (a)
        {
            return "Nam";
        }
        else
        {
            return "Nữ";
        }
    }
}
