@page "/DanhSachBS"
@rendermode InteractiveAuto
 @inject NavigationManager navigation;
 @using Shared.Model;
@using Microsoft.AspNetCore.Authorization
@using Shared.form
<div class="container d-flex align-items-center justify-content-center" style="margin-bottom:33rem;">
    <div class="card-body overlay" >
        <div class="row">
            <div class="col-md-6 d-flex flex-column align-items-center">
                <h4 >
                    Dịch vụ của chúng tôi
                </h4>
                <p >
                    Chúng tôi cung cấp các gói xét nghiệm máu chuyên sâu.
                </p>
                <p >
                    Đảm bảo phục vụ mọi nhu cầu của bạn.
                </p>
                <a href="/dichvu" class="btn btn-dark">Gói dịch vụ Y Khoa</a>               
            </div>
        </div>

    </div>
</div>
<!-- tìm kiếm các gói dịch vụ-->
<div class="container">
    <div class="row justify-content-center">		
        <div class="col-lg-6">
            <div class="search-container d-flex">
				<input type="text" @bind="searchTerm" class="form-control" placeholder="Tìm kiếm gói xét nghiệm...">
				<button @onclick="Search" class="btn btn-primary ml-auto">Tìm kiếm</button>
            </div>
        </div>		
    </div>
</div>
<!-- các danh sách bác sĩ-->
<div class="package-container">
	 @if (!FilteredBS.Any())
		{
			<p><em>Không tìm thấy kết quả.</em></p>
		}
		@if (FilteredBS.Any())
		{
		
		<div class="teams-list">			
			<div class="team-items">
				@foreach (var goi in FilteredBS)
				{					
					<div class="team-item">					
						<div class="team-item-info">
							<div class="team-item-photo">
								<a href="/ChiTietThongTinBacSi" class="post-image-container">
									<img src="@goi.Anh" loading="lazy" alt="">
									<span class="circle"></span>
								</a>
							</div>
							<div class="team-item-details">
								<h3 class="team-item-title">
									<a class="txtnamebs" href="/ChiTietThongTinBacSi">@goi.Hoten</a>
								</h3>
								<div class="team-item-meta">@goi.Chucvu</div>
								<div class="team-item-review">
								</div>
								<div class="team-item-actions">
									<a href="/datlich" class="post-image-container">Đặt lịch khám</a>
								</div>
								@if (showNotification && selectedGoiId == goi.Id)
								{
									<div class="alert alert-info">
										@notificationMessage
									</div>
								}
							</div>
						</div>
					</div>					
				}
			</div>
		</div>
		
		}
</div>
<!-- Nút phân trang-->
<nav aria-label="Page navigation">
	<nav id="pagination-7960274864" aria-label="Page navigation" class="text-center">
		<ul class="pagination mb-0 justify-content-center">
			<!-- Nút trang trước -->
			<li class="page-item @(currentPage == 1 ? "disabled" : "")">
				<a aria-label="Trước" class="page-nav previous page-link" rel="tooltip" tabindex="-1" title="Trước" @onclick="(() => ChangePage(currentPage - 1))">
					<i class="fa fa-angle-left"></i>
					<span>&#10094;</span>
				</a>
			</li>
			<!-- Các nút trang -->
			@for (var pageNumber = 1; pageNumber <= totalPages; pageNumber++)
			{
				var localPageNumber = pageNumber; // Tạo biến cục bộ ở đây
				<li class="page-item @(pageNumber == currentPage ? "active" : "")">
					<a class="page-link" @onclick="(() => ChangePage(localPageNumber))">@pageNumber</a>
				</li>
			}

			<!-- Nút trang tiếp theo -->
			<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
				<a aria-label="Kế tiếp" class="page-nav next page-link" rel="tooltip" tabindex="-1" title="Kế tiếp" @onclick="(() => ChangePage(currentPage + 1))">
					<i class="fa fa-angle-right"></i>
					<span>&#10095;</span>
				</a>
			</li>
		</ul>
	</nav>
</nav>
@code {
	[Inject]
	protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

	public string UserName { get; set; }
	public User user { get; set; } = new();
	private int itemsPerPage = 12; // Số lượng mục trên mỗi trang
	private int currentPage = 1;
	private int totalPages;
	private int selectedGoiId = -1; // Thêm biến để lưu trữ ID của gói được chọn
	private bool hasRendered;
	private bool showNotification = false;
	private string notificationMessage = "";
	private string searchTerm = "";
	public List<BacSi> AllBS { get; set; } = new();
	private List<BacSi> FilteredBS { get; set; } = new List<BacSi>();

	protected override async Task OnInitializedAsync()
	{
		await LoadAlLBS();
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		UserName = authState.User.Identity.Name;

	}
	public async Task LoadAlLBS()
	{
		var bs = await bacsiservice.getallAsync();
		AllBS.Clear();

		if (bs is null) return;

		totalPages = (int)Math.Ceiling((double)bs.Count / itemsPerPage);

		foreach (var g in bs.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage))
		{
			AllBS.Add(g);
		}
		FilterBS(); // Gọi phương thức FilterGoi() sau khi tải dữ liệu
	}
	private async Task ChangePage(int pageNumber)
	{
		if (pageNumber < 1 || pageNumber > totalPages || pageNumber == currentPage)
		{
			return;
		}

		currentPage = pageNumber;
		await LoadAlLBS();  // Gọi phương thức để load dữ liệu cho trang mới
		StateHasChanged();
	}
	private void FilterBS()
	{
		FilteredBS = AllBS.Where(bs =>
			bs.Hoten.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
			bs.Chucvu.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
	}
	private void Search()
	{
		currentPage = 1; // Reset to the first page when performing a new search
		LoadAlLBS();
	}
}
