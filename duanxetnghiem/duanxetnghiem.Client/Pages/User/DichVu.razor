@page "/dichvu"
@rendermode InteractiveAuto
 @inject NavigationManager navigation;
 @using Shared.Model;
@using Microsoft.AspNetCore.Authorization
@using Shared.form

<!--Thong báo-->
<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000" id="toastNotification">
    <div class="toast-header">
        <strong class="mr-auto">Thông báo</strong>
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="toast-body">
        Gói đã có trong đơn xét nghiệm!
    </div>
</div>
<!-- hinh nen goi dich vu-->
<div class="container d-flex align-items-center justify-content-center" style="margin-bottom:33rem;">
    <div class="card-body overlay">
        <div class="row">
            <div class="col-md-6 d-flex flex-column align-items-center">
                <h4>
                    Gói Dịch Vụ Xét Nghiệm Sức Khỏe
                </h4>
                <p>
                    Cung cấp các gói xét nghiệm máu phù hợp với nhu cầu của bạn
                </p>
                <div class="d-flex flex-row gap-3">
                    <a href="/quytrinh" class="btn btn-outline-dark">Quy trình</a>
                    <a href="/quytrinh" class="btn btn-dark"> Đặt lịch hẹn</a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- tìm kiếm các gói dịch vụ-->
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="search-container d-flex">
                <input type="text" @bind="searchTerm" class="form-control" placeholder="Tìm kiếm ...">
                <button @onclick="Search" class="btn1 btn-primary ml-auto">Tìm kiếm</button>
            </div>
        </div>
    </div>
</div>

<!--list goi xét nghiem-->
<div class="package-container" style="margin-bottom: 10rem;">
    @if (!FilteredGoi.Any())
    {
        <p><em>Không tìm thấy kết quả.</em></p>
    }
    @if (FilteredGoi.Any())
    {
        <div class="team-items">
            @foreach (var goi in FilteredGoi)
            {
                <div class="package-item">
                    <div class="package-item-photo">
                        <a href="/ChiTietGoiXetNghiem" class="post-image-container" tabindex="-1">
                            <div class="package-item-photo">
                                <img src="@goi.Anh" alt="" loading="lazy">
                            </div>
                        </a>
                    </div>
                    <div class="package-item-detail">
                        <div class="package-item-price">@goi.Gia VND</div>
                        <h3 class="package-item-title">@goi.TenGoi</h3>
                        <div class="package-item-meta">
                            <div class="package-item-gender">
                                Thời gian :
                                @goi.ThoiGian
                            </div>
                            <div class="plus-icon-container">
                                <div class="actions1">
                                    <a @onclick="@(() => themgio(goi.Id))" href="#myBooking" data-toggle="modal" class="btn btn-primary btn-booking rounded-circle">Thêm gói hàng</a>
                                </div>
                            </div>
                            @if (showNotification && selectedGoiId == goi.Id)
                            {
                                <div class="alert alert-info">
                                    @notificationMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>

            }
        </div>

    }
</div>

<!-- Nút phân trang-->
<nav aria-label="Page navigation" style="margin-bottom: 10rem;">
    <nav id="pagination-7960274864" aria-label="Page navigation" class="text-center">
        <ul class="pagination mb-0 justify-content-center">
            <!-- Nút trang trước -->
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a aria-label="Trước" class="page-nav previous page-link" rel="tooltip" tabindex="-1" title="Trước" @onclick="(() => ChangePage(currentPage - 1))">
                    <i class="fa fa-angle-left"></i>
                    <span>&#10094;</span>
                </a>
            </li>
            <!-- Các nút trang -->
            @for (var pageNumber = 1; pageNumber <= totalPages; pageNumber++)
            {
                var localPageNumber = pageNumber; // Tạo biến cục bộ ở đây
                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                    <a class="page-link" @onclick="(() => ChangePage(localPageNumber))">@pageNumber</a>
                </li>
            }

            <!-- Nút trang tiếp theo -->
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a aria-label="Kế tiếp" class="page-nav next page-link" rel="tooltip" tabindex="-1" title="Kế tiếp" @onclick="(() => ChangePage(currentPage + 1))">
                    <i class="fa fa-angle-right"></i>
                    <span>&#10095;</span>
                </a>
            </li>
        </ul>
    </nav>
</nav>


@code {
    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    public string UserName { get; set; }
    public User user { get; set; } = new();
    public List<GoiXetNghiem> AllGoi { get; set; } = new();
    public List<GioHang> gioHangList { get; set; } = new();
    private int itemsPerPage = 9; // Số lượng mục trên mỗi trang
    private int currentPage = 1;
    private int totalPages;
    private int selectedGoiId = -1; // Thêm biến để lưu trữ ID của gói được chọn
    private bool hasRendered;
    private bool showNotification = false;
    private string notificationMessage = "";
    private string searchTerm = "";
    private List<GoiXetNghiem> FilteredGoi { get; set; } = new List<GoiXetNghiem>();


    protected override async Task OnInitializedAsync()
    {
        await LoadAlLGoi();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserName = authState.User.Identity.Name;

    }
    public async Task themgio(int id)
    {
        if (UserName == null)
        {
            navigation.NavigateTo("/Account/Login");
            return;
        }
        user = await Usertservice.getuserbyemail(UserName);

        if (user == null)
        {
            navigation.NavigateTo("/AddUser");
            return;
        }

        gioHangList = await GHservice.getallAsyncbyiduser(user.Id);

        var goi = FilteredGoi.FirstOrDefault(g => g.Id == id);

        if (goi != null)
        {
            selectedGoiId = goi.Id; // Lưu trữ ID của gói được chọn

            if (gioHangList.Any(ab => ab.GoiXetNghiemId == id))
            {
                notificationMessage = "Gói đã có trong giỏ hàng.";
            }
            else
            {
                await ThemGoiVaoGioHang(id);
                notificationMessage = "Thêm vào giỏ hàng thành công.";
            }

            showNotification = true;
        }
    }

    private async Task ThemGoiVaoGioHang(int id)
    {
        GioHang a = new GioHang
            {
                GoiXetNghiemId = id,
                IsSelected = false,
                UserId = user.Id
            };
        await GHservice.addAsync(a);
        gioHangList.Add(a); // Thêm vào danh sách giỏ hàng để tránh gọi lại dịch vụ khi cần kiểm tra lại
    }

    public async Task LoadAlLGoi()
    {
        var goi = await GXNservice.getallAsync();
        AllGoi.Clear();

        if (goi is null) return;

        totalPages = (int)Math.Ceiling((double)goi.Count / itemsPerPage);

        foreach (var g in goi.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage))
        {
            AllGoi.Add(g);
        }
        FilterGoi(); // Gọi phương thức FilterGoi() sau khi tải dữ liệu
    }
    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages || pageNumber == currentPage)
        {
            return;
        }

        currentPage = pageNumber;
        await LoadAlLGoi();  // Gọi phương thức để load dữ liệu cho trang mới
        StateHasChanged();
    }
    private void FilterGoi()
    {
        FilteredGoi = AllGoi.Where(goi =>
        goi.TenGoi.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        goi.Gia.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        goi.ThoiGian.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
    }
    private void Search()
    {
        currentPage = 1; // Reset to the first page when performing a new search
        LoadAlLGoi();
    }


}